/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createBuyerItemPricePost } from '../fn/price/create-buyer-item-price-post';
import { CreateBuyerItemPricePost$Params } from '../fn/price/create-buyer-item-price-post';
import { getBuyerItemsPriceTypeIdGet } from '../fn/price/get-buyer-items-price-type-id-get';
import { GetBuyerItemsPriceTypeIdGet$Params } from '../fn/price/get-buyer-items-price-type-id-get';

@Injectable({ providedIn: 'root' })
export class PriceService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createBuyerItemPricePost()` */
  static readonly CreateBuyerItemPricePostPath = '/price/';

  /**
   * Создать новый итем.
   *
   * Сохраняет новый итем и привязывает его к категории
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createBuyerItemPricePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBuyerItemPricePost$Response(params: CreateBuyerItemPricePost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return createBuyerItemPricePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Создать новый итем.
   *
   * Сохраняет новый итем и привязывает его к категории
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createBuyerItemPricePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBuyerItemPricePost(params: CreateBuyerItemPricePost$Params, context?: HttpContext): Observable<any> {
    return this.createBuyerItemPricePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `getBuyerItemsPriceTypeIdGet()` */
  static readonly GetBuyerItemsPriceTypeIdGetPath = '/price/{type_id}';

  /**
   * Получить список итемов.
   *
   * Получение прайс листа и списка итемов для снабженца
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBuyerItemsPriceTypeIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBuyerItemsPriceTypeIdGet$Response(params: GetBuyerItemsPriceTypeIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return getBuyerItemsPriceTypeIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Получить список итемов.
   *
   * Получение прайс листа и списка итемов для снабженца
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBuyerItemsPriceTypeIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBuyerItemsPriceTypeIdGet(params: GetBuyerItemsPriceTypeIdGet$Params, context?: HttpContext): Observable<any> {
    return this.getBuyerItemsPriceTypeIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}
