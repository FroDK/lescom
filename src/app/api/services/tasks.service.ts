/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { ApiConfiguration } from '../api-configuration';
import { BaseService } from '../base-service';
import { StrictHttpResponse } from '../strict-http-response';

import {
  createTaskTasksPost,
  CreateTaskTasksPost$Params,
} from '../fn/tasks/create-task-tasks-post';
import {
  deleteTaskEndpointTasksTaskIdDelete,
  DeleteTaskEndpointTasksTaskIdDelete$Params,
} from '../fn/tasks/delete-task-endpoint-tasks-task-id-delete';
import {
  getTaskByIdTasksTaskIdGet,
  GetTaskByIdTasksTaskIdGet$Params,
} from '../fn/tasks/get-task-by-id-tasks-task-id-get';
import { readTasksTasksGet, ReadTasksTasksGet$Params } from '../fn/tasks/read-tasks-tasks-get';
import {
  updateTaskEndpointTasksTaskIdPatch,
  UpdateTaskEndpointTasksTaskIdPatch$Params,
} from '../fn/tasks/update-task-endpoint-tasks-task-id-patch';

@Injectable({ providedIn: 'root' })
export class TasksService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `readTasksTasksGet()` */
  static readonly ReadTasksTasksGetPath = '/tasks/';

  /**
   * Получить все задачи.
   *
   * Получить все задачи.
   * Получает весь перечень задач по параметрам, требует доработки по метадате.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `readTasksTasksGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  readTasksTasksGet$Response(
    params?: ReadTasksTasksGet$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<any>> {
    return readTasksTasksGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Получить все задачи.
   *
   * Получить все задачи.
   * Получает весь перечень задач по параметрам, требует доработки по метадате.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `readTasksTasksGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  readTasksTasksGet(params?: ReadTasksTasksGet$Params, context?: HttpContext): Observable<any> {
    return this.readTasksTasksGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body),
    );
  }

  /** Path part for operation `createTaskTasksPost()` */
  static readonly CreateTaskTasksPostPath = '/tasks/';

  /**
   * Создать новую задачу.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTaskTasksPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTaskTasksPost$Response(
    params: CreateTaskTasksPost$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<any>> {
    return createTaskTasksPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Создать новую задачу.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTaskTasksPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTaskTasksPost(params: CreateTaskTasksPost$Params, context?: HttpContext): Observable<any> {
    return this.createTaskTasksPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body),
    );
  }

  /** Path part for operation `getTaskByIdTasksTaskIdGet()` */
  static readonly GetTaskByIdTasksTaskIdGetPath = '/tasks/{task_id}';

  /**
   * Получить задачу.
   *
   * Получить задачу.
   * Получает задачу по идентификатору
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTaskByIdTasksTaskIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskByIdTasksTaskIdGet$Response(
    params: GetTaskByIdTasksTaskIdGet$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<any>> {
    return getTaskByIdTasksTaskIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Получить задачу.
   *
   * Получить задачу.
   * Получает задачу по идентификатору
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTaskByIdTasksTaskIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskByIdTasksTaskIdGet(
    params: GetTaskByIdTasksTaskIdGet$Params,
    context?: HttpContext,
  ): Observable<any> {
    return this.getTaskByIdTasksTaskIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body),
    );
  }

  /** Path part for operation `deleteTaskEndpointTasksTaskIdDelete()` */
  static readonly DeleteTaskEndpointTasksTaskIdDeletePath = '/tasks/{task_id}';

  /**
   * Удалить задачу.
   *
   * Удаляет задачу по ID вместе с комментариями. Доступно только администраторам.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTaskEndpointTasksTaskIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTaskEndpointTasksTaskIdDelete$Response(
    params: DeleteTaskEndpointTasksTaskIdDelete$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<{}>> {
    return deleteTaskEndpointTasksTaskIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Удалить задачу.
   *
   * Удаляет задачу по ID вместе с комментариями. Доступно только администраторам.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTaskEndpointTasksTaskIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTaskEndpointTasksTaskIdDelete(
    params: DeleteTaskEndpointTasksTaskIdDelete$Params,
    context?: HttpContext,
  ): Observable<{}> {
    return this.deleteTaskEndpointTasksTaskIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<{}>): {} => r.body),
    );
  }

  /** Path part for operation `updateTaskEndpointTasksTaskIdPatch()` */
  static readonly UpdateTaskEndpointTasksTaskIdPatchPath = '/tasks/{task_id}';

  /**
   * Обновить задачу.
   *
   * Позволяет обновить значение, этап, родителя или мета-данные задачи по её идентификатору. Доступно только администраторам.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTaskEndpointTasksTaskIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTaskEndpointTasksTaskIdPatch$Response(
    params: UpdateTaskEndpointTasksTaskIdPatch$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<any>> {
    return updateTaskEndpointTasksTaskIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Обновить задачу.
   *
   * Позволяет обновить значение, этап, родителя или мета-данные задачи по её идентификатору. Доступно только администраторам.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTaskEndpointTasksTaskIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTaskEndpointTasksTaskIdPatch(
    params: UpdateTaskEndpointTasksTaskIdPatch$Params,
    context?: HttpContext,
  ): Observable<any> {
    return this.updateTaskEndpointTasksTaskIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body),
    );
  }
}
