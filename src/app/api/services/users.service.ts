/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteUserUsersUserIdDelete } from '../fn/users/delete-user-users-user-id-delete';
import { DeleteUserUsersUserIdDelete$Params } from '../fn/users/delete-user-users-user-id-delete';
import { getAllRolesUsersRolesGet } from '../fn/users/get-all-roles-users-roles-get';
import { GetAllRolesUsersRolesGet$Params } from '../fn/users/get-all-roles-users-roles-get';
import { profileUserUsersIdGet } from '../fn/users/profile-user-users-id-get';
import { ProfileUserUsersIdGet$Params } from '../fn/users/profile-user-users-id-get';
import { updateUserUsersUserIdPatch } from '../fn/users/update-user-users-user-id-patch';
import { UpdateUserUsersUserIdPatch$Params } from '../fn/users/update-user-users-user-id-patch';
import { userListUsersGet } from '../fn/users/user-list-users-get';
import { UserListUsersGet$Params } from '../fn/users/user-list-users-get';

@Injectable({ providedIn: 'root' })
export class UsersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllRolesUsersRolesGet()` */
  static readonly GetAllRolesUsersRolesGetPath = '/users/roles';

  /**
   * Получить список всех ролей (только админ).
   *
   * Возвращает все доступные роли пользователей в системе.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllRolesUsersRolesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRolesUsersRolesGet$Response(params?: GetAllRolesUsersRolesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return getAllRolesUsersRolesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Получить список всех ролей (только админ).
   *
   * Возвращает все доступные роли пользователей в системе.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllRolesUsersRolesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRolesUsersRolesGet(params?: GetAllRolesUsersRolesGet$Params, context?: HttpContext): Observable<any> {
    return this.getAllRolesUsersRolesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `userListUsersGet()` */
  static readonly UserListUsersGetPath = '/users/';

  /**
   * Получение списка всех пользователей (только админ).
   *
   * Возвращает список всех зарегистрированных пользователей в системе.
   * Получает весь перечень пользователей по параметрам
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userListUsersGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  userListUsersGet$Response(params?: UserListUsersGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return userListUsersGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Получение списка всех пользователей (только админ).
   *
   * Возвращает список всех зарегистрированных пользователей в системе.
   * Получает весь перечень пользователей по параметрам
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userListUsersGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  userListUsersGet(params?: UserListUsersGet$Params, context?: HttpContext): Observable<any> {
    return this.userListUsersGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `profileUserUsersIdGet()` */
  static readonly ProfileUserUsersIdGetPath = '/users/{id}';

  /**
   * Получение профиля пользователя.
   *
   * Возвращает информацию о пользователе и его ролях.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `profileUserUsersIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  profileUserUsersIdGet$Response(params: ProfileUserUsersIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return profileUserUsersIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Получение профиля пользователя.
   *
   * Возвращает информацию о пользователе и его ролях.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `profileUserUsersIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  profileUserUsersIdGet(params: ProfileUserUsersIdGet$Params, context?: HttpContext): Observable<any> {
    return this.profileUserUsersIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `deleteUserUsersUserIdDelete()` */
  static readonly DeleteUserUsersUserIdDeletePath = '/users/{user_id}';

  /**
   * Удаление пользователя (только админ).
   *
   * Удаляет пользователя по его ID. Требуется доступ администратора.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteUserUsersUserIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUserUsersUserIdDelete$Response(params: DeleteUserUsersUserIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return deleteUserUsersUserIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Удаление пользователя (только админ).
   *
   * Удаляет пользователя по его ID. Требуется доступ администратора.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteUserUsersUserIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUserUsersUserIdDelete(params: DeleteUserUsersUserIdDelete$Params, context?: HttpContext): Observable<any> {
    return this.deleteUserUsersUserIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `updateUserUsersUserIdPatch()` */
  static readonly UpdateUserUsersUserIdPatchPath = '/users/{user_id}';

  /**
   * Редактировать пользователя.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUserUsersUserIdPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUserUsersUserIdPatch$Response(params: UpdateUserUsersUserIdPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return updateUserUsersUserIdPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Редактировать пользователя.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUserUsersUserIdPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUserUsersUserIdPatch(params: UpdateUserUsersUserIdPatch$Params, context?: HttpContext): Observable<any> {
    return this.updateUserUsersUserIdPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}
