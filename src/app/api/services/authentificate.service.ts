/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { authorizeByTgAuthTelegramSignInPost } from '../fn/authentificate/authorize-by-tg-auth-telegram-sign-in-post';
import { AuthorizeByTgAuthTelegramSignInPost$Params } from '../fn/authentificate/authorize-by-tg-auth-telegram-sign-in-post';
import { authorizeUserAuthSignInPost } from '../fn/authentificate/authorize-user-auth-sign-in-post';
import { AuthorizeUserAuthSignInPost$Params } from '../fn/authentificate/authorize-user-auth-sign-in-post';
import { checkUserAuthCheckGet } from '../fn/authentificate/check-user-auth-check-get';
import { CheckUserAuthCheckGet$Params } from '../fn/authentificate/check-user-auth-check-get';
import { registerBotAuthTelegramSignUpPost } from '../fn/authentificate/register-bot-auth-telegram-sign-up-post';
import { RegisterBotAuthTelegramSignUpPost$Params } from '../fn/authentificate/register-bot-auth-telegram-sign-up-post';
import { registerUserAuthSignUpPost } from '../fn/authentificate/register-user-auth-sign-up-post';
import { RegisterUserAuthSignUpPost$Params } from '../fn/authentificate/register-user-auth-sign-up-post';

@Injectable({ providedIn: 'root' })
export class AuthentificateService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `authorizeUserAuthSignInPost()` */
  static readonly AuthorizeUserAuthSignInPostPath = '/auth/sign-in';

  /**
   * Авторизация по логину и паролю.
   *
   * Авторизует пользователя по логину и паролю.
   * Возвращает JWT-токен при успешной авторизации.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authorizeUserAuthSignInPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authorizeUserAuthSignInPost$Response(
    params: AuthorizeUserAuthSignInPost$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<any>> {
    return authorizeUserAuthSignInPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Авторизация по логину и паролю.
   *
   * Авторизует пользователя по логину и паролю.
   * Возвращает JWT-токен при успешной авторизации.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authorizeUserAuthSignInPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authorizeUserAuthSignInPost(
    params: AuthorizeUserAuthSignInPost$Params,
    context?: HttpContext,
  ): Observable<any> {
    return this.authorizeUserAuthSignInPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body),
    );
  }

  /** Path part for operation `authorizeByTgAuthTelegramSignInPost()` */
  static readonly AuthorizeByTgAuthTelegramSignInPostPath = '/auth/telegram/sign-in';

  /**
   * Авторизация по Telegram ID.
   *
   * Авторизует пользователя через Telegram ID.
   * Возвращает JWT-токен при успешной авторизации.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authorizeByTgAuthTelegramSignInPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authorizeByTgAuthTelegramSignInPost$Response(
    params: AuthorizeByTgAuthTelegramSignInPost$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<any>> {
    return authorizeByTgAuthTelegramSignInPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Авторизация по Telegram ID.
   *
   * Авторизует пользователя через Telegram ID.
   * Возвращает JWT-токен при успешной авторизации.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authorizeByTgAuthTelegramSignInPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authorizeByTgAuthTelegramSignInPost(
    params: AuthorizeByTgAuthTelegramSignInPost$Params,
    context?: HttpContext,
  ): Observable<any> {
    return this.authorizeByTgAuthTelegramSignInPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body),
    );
  }

  /** Path part for operation `registerUserAuthSignUpPost()` */
  static readonly RegisterUserAuthSignUpPostPath = '/auth/sign-up';

  /**
   * Регистрация нового пользователя (только админ).
   *
   * Регистрирует нового пользователя и назначает ему роли.
   * Доступно только администраторам.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `registerUserAuthSignUpPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerUserAuthSignUpPost$Response(
    params: RegisterUserAuthSignUpPost$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<any>> {
    return registerUserAuthSignUpPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Регистрация нового пользователя (только админ).
   *
   * Регистрирует нового пользователя и назначает ему роли.
   * Доступно только администраторам.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `registerUserAuthSignUpPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerUserAuthSignUpPost(
    params: RegisterUserAuthSignUpPost$Params,
    context?: HttpContext,
  ): Observable<any> {
    return this.registerUserAuthSignUpPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body),
    );
  }

  /** Path part for operation `registerBotAuthTelegramSignUpPost()` */
  static readonly RegisterBotAuthTelegramSignUpPostPath = '/auth/telegram/sign-up';

  /**
   * Регистрация нового бота (только админ).
   *
   * Регистрирует нового Telegram-бота с заданным описанием и ролями.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `registerBotAuthTelegramSignUpPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerBotAuthTelegramSignUpPost$Response(
    params: RegisterBotAuthTelegramSignUpPost$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<any>> {
    return registerBotAuthTelegramSignUpPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Регистрация нового бота (только админ).
   *
   * Регистрирует нового Telegram-бота с заданным описанием и ролями.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `registerBotAuthTelegramSignUpPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  registerBotAuthTelegramSignUpPost(
    params: RegisterBotAuthTelegramSignUpPost$Params,
    context?: HttpContext,
  ): Observable<any> {
    return this.registerBotAuthTelegramSignUpPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body),
    );
  }

  /** Path part for operation `checkUserAuthCheckGet()` */
  static readonly CheckUserAuthCheckGetPath = '/auth/check';

  /**
   * Проверка авторизации.
   *
   * Проверяет действительность токена и возвращает новый JWT-токен.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `checkUserAuthCheckGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  checkUserAuthCheckGet$Response(
    params?: CheckUserAuthCheckGet$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<any>> {
    return checkUserAuthCheckGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Проверка авторизации.
   *
   * Проверяет действительность токена и возвращает новый JWT-токен.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `checkUserAuthCheckGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  checkUserAuthCheckGet(
    params?: CheckUserAuthCheckGet$Params,
    context?: HttpContext,
  ): Observable<any> {
    return this.checkUserAuthCheckGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body),
    );
  }
}
