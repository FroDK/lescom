/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { ApiConfiguration } from '../api-configuration';
import { BaseService } from '../base-service';
import { StrictHttpResponse } from '../strict-http-response';

import {
  createTaskTypeTasksTypesPost,
  CreateTaskTypeTasksTypesPost$Params,
} from '../fn/task-types/create-task-type-tasks-types-post';
import {
  deleteTaskTypeTasksTypesIdDelete,
  DeleteTaskTypeTasksTypesIdDelete$Params,
} from '../fn/task-types/delete-task-type-tasks-types-id-delete';
import {
  getTaskTypesAndStagesTasksTypesGet,
  GetTaskTypesAndStagesTasksTypesGet$Params,
} from '../fn/task-types/get-task-types-and-stages-tasks-types-get';
import {
  updateTaskTypeTasksTypesPatch,
  UpdateTaskTypeTasksTypesPatch$Params,
} from '../fn/task-types/update-task-type-tasks-types-patch';

@Injectable({ providedIn: 'root' })
export class TaskTypesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getTaskTypesAndStagesTasksTypesGet()` */
  static readonly GetTaskTypesAndStagesTasksTypesGetPath = '/tasks/types/';

  /**
   * Получить список типов задач.
   *
   * Получить все типы задач и их стадии. Можно фильтровать по parent_id или собрать дерево.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTaskTypesAndStagesTasksTypesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskTypesAndStagesTasksTypesGet$Response(
    params?: GetTaskTypesAndStagesTasksTypesGet$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<any>> {
    return getTaskTypesAndStagesTasksTypesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Получить список типов задач.
   *
   * Получить все типы задач и их стадии. Можно фильтровать по parent_id или собрать дерево.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTaskTypesAndStagesTasksTypesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskTypesAndStagesTasksTypesGet(
    params?: GetTaskTypesAndStagesTasksTypesGet$Params,
    context?: HttpContext,
  ): Observable<any> {
    return this.getTaskTypesAndStagesTasksTypesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body),
    );
  }

  /** Path part for operation `createTaskTypeTasksTypesPost()` */
  static readonly CreateTaskTypeTasksTypesPostPath = '/tasks/types/';

  /**
   * Создать тип задачи.
   *
   * Создаёт новый тип задачи с указанным названием и ID ответственной роли.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTaskTypeTasksTypesPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTaskTypeTasksTypesPost$Response(
    params: CreateTaskTypeTasksTypesPost$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<any>> {
    return createTaskTypeTasksTypesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Создать тип задачи.
   *
   * Создаёт новый тип задачи с указанным названием и ID ответственной роли.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTaskTypeTasksTypesPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTaskTypeTasksTypesPost(
    params: CreateTaskTypeTasksTypesPost$Params,
    context?: HttpContext,
  ): Observable<any> {
    return this.createTaskTypeTasksTypesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body),
    );
  }

  /** Path part for operation `updateTaskTypeTasksTypesPatch()` */
  static readonly UpdateTaskTypeTasksTypesPatchPath = '/tasks/types/';

  /**
   * Обновить тип задачи.
   *
   * Редактирует существующий тип задачи по ID.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTaskTypeTasksTypesPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTaskTypeTasksTypesPatch$Response(
    params: UpdateTaskTypeTasksTypesPatch$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<any>> {
    return updateTaskTypeTasksTypesPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Обновить тип задачи.
   *
   * Редактирует существующий тип задачи по ID.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTaskTypeTasksTypesPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTaskTypeTasksTypesPatch(
    params: UpdateTaskTypeTasksTypesPatch$Params,
    context?: HttpContext,
  ): Observable<any> {
    return this.updateTaskTypeTasksTypesPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body),
    );
  }

  /** Path part for operation `deleteTaskTypeTasksTypesIdDelete()` */
  static readonly DeleteTaskTypeTasksTypesIdDeletePath = '/tasks/types/{id}';

  /**
   * Удалить тип задачи.
   *
   * Удаляет тип задачи по ID. Также удаляются связанные стадии.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTaskTypeTasksTypesIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTaskTypeTasksTypesIdDelete$Response(
    params: DeleteTaskTypeTasksTypesIdDelete$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<any>> {
    return deleteTaskTypeTasksTypesIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Удалить тип задачи.
   *
   * Удаляет тип задачи по ID. Также удаляются связанные стадии.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTaskTypeTasksTypesIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTaskTypeTasksTypesIdDelete(
    params: DeleteTaskTypeTasksTypesIdDelete$Params,
    context?: HttpContext,
  ): Observable<any> {
    return this.deleteTaskTypeTasksTypesIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body),
    );
  }
}
