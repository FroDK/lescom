/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createCommentAsTaskCommentsPost } from '../fn/create-comment-as-task-comments-post';
import { CreateCommentAsTaskCommentsPost$Params } from '../fn/create-comment-as-task-comments-post';
import { getCommentPhotosByObjectCommentsByObjectObjectIdGet } from '../fn/get-comment-photos-by-object-comments-by-object-object-id-get';
import { GetCommentPhotosByObjectCommentsByObjectObjectIdGet$Params } from '../fn/get-comment-photos-by-object-comments-by-object-object-id-get';
import { getCommentsByTaskCommentsByTaskTaskIdGet } from '../fn/get-comments-by-task-comments-by-task-task-id-get';
import { GetCommentsByTaskCommentsByTaskTaskIdGet$Params } from '../fn/get-comments-by-task-comments-by-task-task-id-get';

@Injectable({ providedIn: 'root' })
export class Service extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createCommentAsTaskCommentsPost()` */
  static readonly CreateCommentAsTaskCommentsPostPath = '/comments/';

  /**
   * Create Comment As Task.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createCommentAsTaskCommentsPost()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createCommentAsTaskCommentsPost$Response(params: CreateCommentAsTaskCommentsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return createCommentAsTaskCommentsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create Comment As Task.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createCommentAsTaskCommentsPost$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  createCommentAsTaskCommentsPost(params: CreateCommentAsTaskCommentsPost$Params, context?: HttpContext): Observable<number> {
    return this.createCommentAsTaskCommentsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getCommentsByTaskCommentsByTaskTaskIdGet()` */
  static readonly GetCommentsByTaskCommentsByTaskTaskIdGetPath = '/comments/by_task/{task_id}';

  /**
   * Get Comments By Task.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCommentsByTaskCommentsByTaskTaskIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCommentsByTaskCommentsByTaskTaskIdGet$Response(params: GetCommentsByTaskCommentsByTaskTaskIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return getCommentsByTaskCommentsByTaskTaskIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Comments By Task.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCommentsByTaskCommentsByTaskTaskIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCommentsByTaskCommentsByTaskTaskIdGet(params: GetCommentsByTaskCommentsByTaskTaskIdGet$Params, context?: HttpContext): Observable<any> {
    return this.getCommentsByTaskCommentsByTaskTaskIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `getCommentPhotosByObjectCommentsByObjectObjectIdGet()` */
  static readonly GetCommentPhotosByObjectCommentsByObjectObjectIdGetPath = '/comments/by_object/{object_id}';

  /**
   * Get Comment Photos By Object.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCommentPhotosByObjectCommentsByObjectObjectIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCommentPhotosByObjectCommentsByObjectObjectIdGet$Response(params: GetCommentPhotosByObjectCommentsByObjectObjectIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return getCommentPhotosByObjectCommentsByObjectObjectIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Comment Photos By Object.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCommentPhotosByObjectCommentsByObjectObjectIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCommentPhotosByObjectCommentsByObjectObjectIdGet(params: GetCommentPhotosByObjectCommentsByObjectObjectIdGet$Params, context?: HttpContext): Observable<any> {
    return this.getCommentPhotosByObjectCommentsByObjectObjectIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}
