/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createTaskStageTasksStagesPost } from '../fn/task-stages/create-task-stage-tasks-stages-post';
import { CreateTaskStageTasksStagesPost$Params } from '../fn/task-stages/create-task-stage-tasks-stages-post';
import { deleteTaskStageTasksStagesIdDelete } from '../fn/task-stages/delete-task-stage-tasks-stages-id-delete';
import { DeleteTaskStageTasksStagesIdDelete$Params } from '../fn/task-stages/delete-task-stage-tasks-stages-id-delete';
import { updateTaskStageTasksStagesPatch } from '../fn/task-stages/update-task-stage-tasks-stages-patch';
import { UpdateTaskStageTasksStagesPatch$Params } from '../fn/task-stages/update-task-stage-tasks-stages-patch';

@Injectable({ providedIn: 'root' })
export class TaskStagesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createTaskStageTasksStagesPost()` */
  static readonly CreateTaskStageTasksStagesPostPath = '/tasks/stages/';

  /**
   * Создать стадию.
   *
   * Создаёт стадию задачи с заданным названием, типом и опциональной родительской стадией.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTaskStageTasksStagesPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTaskStageTasksStagesPost$Response(params: CreateTaskStageTasksStagesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return createTaskStageTasksStagesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Создать стадию.
   *
   * Создаёт стадию задачи с заданным названием, типом и опциональной родительской стадией.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTaskStageTasksStagesPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTaskStageTasksStagesPost(params: CreateTaskStageTasksStagesPost$Params, context?: HttpContext): Observable<any> {
    return this.createTaskStageTasksStagesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `updateTaskStageTasksStagesPatch()` */
  static readonly UpdateTaskStageTasksStagesPatchPath = '/tasks/stages/';

  /**
   * Обновить стадию.
   *
   * Обновляет информацию о стадии задачи по ID.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTaskStageTasksStagesPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTaskStageTasksStagesPatch$Response(params: UpdateTaskStageTasksStagesPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return updateTaskStageTasksStagesPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Обновить стадию.
   *
   * Обновляет информацию о стадии задачи по ID.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTaskStageTasksStagesPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTaskStageTasksStagesPatch(params: UpdateTaskStageTasksStagesPatch$Params, context?: HttpContext): Observable<any> {
    return this.updateTaskStageTasksStagesPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `deleteTaskStageTasksStagesIdDelete()` */
  static readonly DeleteTaskStageTasksStagesIdDeletePath = '/tasks/stages/{id}';

  /**
   * Удалить стадию.
   *
   * Удаляет стадию задачи по ID.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTaskStageTasksStagesIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTaskStageTasksStagesIdDelete$Response(params: DeleteTaskStageTasksStagesIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return deleteTaskStageTasksStagesIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Удалить стадию.
   *
   * Удаляет стадию задачи по ID.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTaskStageTasksStagesIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTaskStageTasksStagesIdDelete(params: DeleteTaskStageTasksStagesIdDelete$Params, context?: HttpContext): Observable<any> {
    return this.deleteTaskStageTasksStagesIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}
