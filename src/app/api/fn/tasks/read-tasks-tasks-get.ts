/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';


export interface ReadTasksTasksGet$Params {

/**
 * ID задачи
 */
  id?: (number | null);

/**
 * Значение задачи
 */
  value?: (string | null);

/**
 * ID создателя задачи
 */
  creator_id?: (number | null);

/**
 * ID структуры пользователя
 */
  user_structure_id?: (number | null);

/**
 * ID этапа задачи
 */
  stage_id?: (number | null);

/**
 * Значение этапа задачи
 */
  stage_value?: (string | null);

/**
 * ID типа задачи
 */
  type_id?: (number | null);

/**
 * Значение типа задачи
 */
  type_value?: (string | null);

/**
 * ID родительской задачи
 */
  parent_id?: (number | null);

/**
 * Значение родительской задачи
 */
  parent_value?: (string | null);

/**
 * Задачи, созданные после этой даты
 */
  created_after?: (string | null);

/**
 * Задачи, созданные до этой даты
 */
  created_before?: (string | null);

/**
 * ID наблюдателя задачи
 */
  watcher_id?: (number | null);

/**
 * ID исполнителя задачи
 */
  responsible_id?: (number | null);

/**
 * Выбор структуры объекта, указанной в метадате
 */
  structure_id?: (number | null);

/**
 * Выбор структуры объекта, указанной в метадате по наименованию
 */
  structure_value?: (string | null);

/**
 * Прайс на материалы и услуги
 */
  price?: (string | null);

/**
 * Максимальное количество задач
 */
  limit?: number;

/**
 * Сдвиг для пагинации
 */
  offset?: number;
}

export function readTasksTasksGet(http: HttpClient, rootUrl: string, params?: ReadTasksTasksGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
  const rb = new RequestBuilder(rootUrl, readTasksTasksGet.PATH, 'get');
  if (params) {
    rb.query('id', params.id, {});
    rb.query('value', params.value, {});
    rb.query('creator_id', params.creator_id, {});
    rb.query('user_structure_id', params.user_structure_id, {});
    rb.query('stage_id', params.stage_id, {});
    rb.query('stage_value', params.stage_value, {});
    rb.query('type_id', params.type_id, {});
    rb.query('type_value', params.type_value, {});
    rb.query('parent_id', params.parent_id, {});
    rb.query('parent_value', params.parent_value, {});
    rb.query('created_after', params.created_after, {});
    rb.query('created_before', params.created_before, {});
    rb.query('watcher_id', params.watcher_id, {});
    rb.query('responsible_id', params.responsible_id, {});
    rb.query('structure_id', params.structure_id, {});
    rb.query('structure_value', params.structure_value, {});
    rb.query('price', params.price, {});
    rb.query('limit', params.limit, {});
    rb.query('offset', params.offset, {});
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<any>;
    })
  );
}

readTasksTasksGet.PATH = '/tasks/';
