/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { RequestBuilder } from '../../request-builder';
import { StrictHttpResponse } from '../../strict-http-response';

export interface UserListUsersGet$Params {
  /**
   * ID пользователя
   */
  user_id?: number | null;

  /**
   * Номер телефона пользователя
   */
  phone?: string | null;

  /**
   * Логин пользователя
   */
  login?: string | null;

  /**
   * Телеграм айди пользователя
   */
  telegram_username?: string | null;

  /**
   * Имя пользователя
   */
  first_name?: string | null;

  /**
   * Фамилия пользователя
   */
  last_name?: string | null;

  /**
   * Отчество пользователя
   */
  patronymic?: string | null;

  /**
   * ID структуры
   */
  structure_id?: number | null;

  /**
   * Название роли пользователя
   */
  role_value?: string | null;

  /**
   * Максимальное количество пользователей
   */
  limit?: number;

  /**
   * Сдвиг для пагинации
   */
  offset?: number;
}

export function userListUsersGet(
  http: HttpClient,
  rootUrl: string,
  params?: UserListUsersGet$Params,
  context?: HttpContext,
): Observable<StrictHttpResponse<any>> {
  const rb = new RequestBuilder(rootUrl, userListUsersGet.PATH, 'get');
  if (params) {
    rb.query('user_id', params.user_id, {});
    rb.query('phone', params.phone, {});
    rb.query('login', params.login, {});
    rb.query('telegram_username', params.telegram_username, {});
    rb.query('first_name', params.first_name, {});
    rb.query('last_name', params.last_name, {});
    rb.query('patronymic', params.patronymic, {});
    rb.query('structure_id', params.structure_id, {});
    rb.query('role_value', params.role_value, {});
    rb.query('limit', params.limit, {});
    rb.query('offset', params.offset, {});
  }

  return http.request(rb.build({ responseType: 'json', accept: 'application/json', context })).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<any>;
    }),
  );
}

userListUsersGet.PATH = '/users/';
